# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
test-results/
pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/
docs/_static/
docs/_templates/
docs/build/
docs/source/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints
*.ipynb

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
poetry.lock
poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.local
.env.*.local
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.virtualenv
virtualenv/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/
*.iml
*.iws
*.ipr

# VSCode
.vscode/
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets
.history/
*.vsix

# Sublime Text
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache
*.sublime-workspace
*.sublime-project

# Visual Studio
.vs/
*.suo
*.user
*.userosscache
*.sln.docstates

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# MongoDB
*.lock
mongod.lock
journal/
*.wt

# Redis
dump.rdb
appendonly.aof
redis.log

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Database files
*.db
*.sqlite
*.sqlite3
*.sql

# Backup files
*.bak
*.backup
*.old
*.orig
*.tmp
*.temp
*.swp
*.swo
*.swn

# Private/Secret files
.env*
!.env.example
secrets/
private/
*.pem
*.key
*.cert
*.crt
*.p12
*.pfx

# Test outputs
test_output/
test_results/
screenshots/
videos/

# Documentation build
docs/_build/
site/
public/

# Package managers
node_modules/
bower_components/

# CI/CD
.github/workflows/local/
.gitlab-ci-local/
.circleci/local/

# Terraform
*.tfstate
*.tfstate.*
.terraform/
terraform.tfvars

# Docker
docker-compose.override.yml
.dockerignore.local

# Python specific
*.pyc
*.pyo
*.pyd
.Python
pip-selfcheck.json

# Project specific ignores
local_test.py
scratch.py
playground/
sandbox/
experiments/
todo.txt
notes.txt
.notes/

# MongoFlow specific
mongoflow.log
mongoflow_*.log
.mongoflow_cache/
migrations_dev/
examples/output/
examples/*.json
examples/*.csv

# Performance profiling
*.prof
*.lprof
*.calltree
profiles/

# Coverage reports
.coverage.*
coverage/
htmlcov/
lcov.info

# Benchmarks
benchmarks/results/
*.benchmark

# Editor configs (keep only templates)
!.editorconfig
!.prettierrc
!.eslintrc

# Keep these files
!.gitkeep
!.gitignore
!.dockerignore
!.env.example
!requirements.txt
!requirements-dev.txt
!Makefile
!setup.py
!setup.cfg
!pyproject.toml
!tox.ini
!MANIFEST.in
!LICENSE
!README.md
!CHANGELOG.md
!CONTRIBUTING.md
